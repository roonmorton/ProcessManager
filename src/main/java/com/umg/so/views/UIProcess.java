/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.umg.so.views;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ronaldo Lemus
 */
public class UIProcess extends javax.swing.JFrame implements Runnable {

    List<Object[]> listObjs = new ArrayList<>();
    DefaultTableModel model;
    UIMedia runMedia = new UIMedia();
    UIProcessReadFile runFile = new UIProcessReadFile();
    static Thread hiloPrincipal;

    /**
     * Creates new form UIProcess
     */
    public UIProcess() {
        initComponents();
        
        this.processTable.setFocusable(false);
        this.btnStart.setEnabled(false);
        this.processTable.setCellSelectionEnabled(false);
        this.processTable.setAutoCreateRowSorter(false);
        this.processTable.getTableHeader().setEnabled(false);
        this.loadInit();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UIProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UIProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UIProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UIProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        processTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(26, 188, 156));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Procesos");

        btnStart.setText("Iniciar");
        btnStart.setEnabled(false);
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 831, Short.MAX_VALUE)
                .addComponent(btnStart)
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnStart))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        processTable.setAutoCreateRowSorter(true);
        processTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        processTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nombre", "Descripci贸n", "Estado", "En ejecuci贸n"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        processTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        processTable.setFocusable(false);
        processTable.setGridColor(new java.awt.Color(255, 255, 255));
        processTable.setSelectionBackground(new java.awt.Color(149, 165, 166));
        processTable.setSelectionForeground(new java.awt.Color(153, 153, 153));
        processTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        processTable.getTableHeader().setResizingAllowed(false);
        processTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(processTable);
        if (processTable.getColumnModel().getColumnCount() > 0) {
            processTable.getColumnModel().getColumn(0).setHeaderValue("No");
            processTable.getColumnModel().getColumn(1).setHeaderValue("Nombre");
            processTable.getColumnModel().getColumn(2).setHeaderValue("Descripci贸n");
            processTable.getColumnModel().getColumn(3).setHeaderValue("Estado");
            processTable.getColumnModel().getColumn(4).setHeaderValue("En ejecuci贸n");
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed

        // TODO add your handling code here:
        if(hiloPrincipal != null){
            hiloPrincipal.start();
            this.btnStart.setEnabled(false);
        }
    }//GEN-LAST:event_btnStartActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable processTable;
    // End of variables declaration//GEN-END:variables
    public static void main(String args[]) {
        UIProcess UIPrincipal = new UIProcess();
        hiloPrincipal = new Thread(UIPrincipal);
        UIPrincipal.setVisible(true);
    }

    @Override
    public void run() {

        try {
            new Thread(runMedia).start();
            new Thread(runFile).start();
            Random rand = new Random();
            int pid = 0;
            int time = 0;
            while (true) {
                if (time <= 0) {
                    time = rand.nextInt(5000) + 1000;
                    pid = rand.nextInt(2) + 1;
                }
                switch (pid) {
                    case 1:
                        runFile.pause();
                        runMedia.go();
                        break;
                    case 2:
                        runMedia.pause();
                        runFile.go();
                        break;
                    case 3:
                        runFile.pause();
                        runMedia.pause();
                        break;
                }
                for (int i = 0; i < model.getDataVector().size(); i++) {
                    Vector ok = (Vector) model.getDataVector();
                    Vector ok2 = new Vector();
                    switch (i + 1) {
                        case 1:
                            ok2.add(i + 1);
                            ok2.add(runMedia.getProcessModel().getName());
                            ok2.add(runMedia.getProcessModel().getDescription());
                            ok2.add(runMedia.getProcessModel().getStatusString());
                            if (pid == i + 1) {
                                ok2.add(time / 1000);
                            } else {
                                ok2.add(0);
                            }
                            break;
                        case 2:
                            ok2.add(i + 1);
                            ok2.add(runFile.getProcessModel().getName());
                            ok2.add(runFile.getProcessModel().getDescription());
                            ok2.add(runFile.getProcessModel().getStatusString());
                            if (pid == i + 1) {
                                ok2.add(time / 1000);
                            } else {
                                ok2.add(0);
                            }
                            break;
                        case 3:
                            break;
                    }
                    ok.set(i, ok2);
                }
                model.fireTableDataChanged();
                time -= 100;
                Thread.sleep(100L);
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(UIProcess.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void loadInit() {
        
        this.model = (DefaultTableModel) this.processTable.getModel();
        listObjs.add(new Object[]{1, runMedia.getProcessModel().getName(), runMedia.getProcessModel().getDescription(), runMedia.getProcessModel().getStatusString(), 0});
        listObjs.add(new Object[]{2, runFile.getProcessModel().getName(), runFile.getProcessModel().getDescription(), runFile.getProcessModel().getStatusString(), 0});
        for (Object[] ob : listObjs) {
            model.addRow(ob);
        }
        this.btnStart.setEnabled(true);
    }

}
